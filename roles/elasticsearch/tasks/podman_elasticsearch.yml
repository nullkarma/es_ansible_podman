---
# variables needed
# elastic_instance_number
- name: 'Set variable names for elastic pods'
  ansible.builtin.set_fact:
    elastic_pod_name: >-
      elasticsearch_{{ inventory_hostname_short }}_{{ elastic_instance_number }}
    elastic_container_name: >-
      {{ inventory_hostname_short }}_{{ elastic_instance_number }}
    elastic_pod_hostname: >-
      {{ inventory_hostname_short }}-es-{{
         elastic_instance_number }}.{{ domainname }}
    elastic_config: >-
      {{ elastic_conf_dir }}/{{
         inventory_hostname_short }}_{{ elastic_instance_number }}
    elastic_data: >-
      {{ elastic_data_dir }}/{{
         inventory_hostname_short }}_{{ elastic_instance_number }}

- name: 'Create persistent base directories for Elasticsearch'
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: '{{ elastic_user }}'
    group: '{{ elastic_group }}'
    mode: '0755'
  loop:
    - '{{ elastic_data }}'
    - '{{ elastic_config }}'

- name: 'Create Elasticsearch data directories'
  become: true
  become_user: '{{ elastic_user }}'
  ansible.builtin.command:
    cmd: >-
      podman unshare
        sh -c 'mkdir -p {{ item }} &&
        chown {{ elastic_container_uid }}:{{ elastic_container_gid }} {{ item }} ||
        rm -f {{ item }}'
    creates: '{{ item }}'
  loop:
    - '{{ elastic_data }}/data'
    - '{{ elastic_data }}/logs'
    - '{{ elastic_data }}/snapshots'
    - '{{ elastic_config }}/certs'
    - '{{ elastic_config }}/config'

- name: Generate elasticsearch.yml for node
  template:
    src: '{{ item }}.j2'
    dest: '{{ elastic_config }}/config/{{ item }}'
    mode: '0644'
    owner: '{{ elastic_user }}'
    group: '{{ elastic_group }}'
  loop:
    - elasticsearch.yml

- name: 'Place elasticsearch logging config into the config directory'
  copy:
    src: '{{ item }}'
    dest: '{{ elastic_config }}/config/{{ item }}'
    mode: '0644'
    owner: '{{ elastic_user }}'
    group: '{{ elastic_group }}'
  loop:
    - log4j2.properties

- name: 'Create pod for elasticsearch'
  become: true
  become_user: '{{ elastic_user }}'
  containers.podman.podman_pod:
    name: '{{ elastic_pod_name }}'
    hostname: '{{ elastic_pod_hostname }}'
    state: '{{ elastic_systemd_state }}'
    recreate: '{{ elastic_systemd_recreate }}'
    publish:
      - '{{ 9200 + elastic_instance_number }}:9200'
      - '{{ 9300 + elastic_instance_number }}:9200'

- name: Run Elastic container
  become: true
  become_user: '{{ elastic_user }}'
  containers.podman.podman_container:
    pod: '{{ elastic_pod_name }}'
    name: '{{ elastic_container_name }}'
    image: '{{ elastic_image }}:{{ elastic_image_version }}'
    state: 'started'
    stop_timeout: '90'
    recreate: '{{ elastic_systemd_recreate }}'
    label:
      process: 'elasticsearch'
    volume:
      - '{{ elastic_data }}/logs:/usr/share/elasticsearch/logs:z,rw'
      - '{{ elastic_data }}/data:/usr/share/elasticsearch/data:z,rw'
      - '{{ elastic_data }}/snapshots:{{ elastic_snapshot_repository }}:z,rw'
      - '{{ elastic_config }}/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro'
      - '{{ elastic_config }}/config/log4j2.properties:/usr/share/elasticsearch/config/log4j2.properties:ro'
      - '{{ elastic_config }}/certs:/usr/share/elasticsearch/config/certificates:ro'
    # ulimit:
    #   - 'memlock=-1:-1'
    # memory: '{{ elastic.memory_limit }}'
    #    cpus: '{{ elastic.cpu_limit }}'
    env:
      TZ: '{{ timezone }}'
      ES_HEAP_SIZE: '{{ elastic.heap_size }}'
      ES_JAVA_OPTS: '{{ elastic.java_opts }}'
      ELASTIC_PASSWORD: '{{ elastic_password }}'
      # HTTP_PROXY: '{{ http_proxy }}'
      # HTTPS_PROXY: '{{ https_proxy }}'
  register: 'result'
  until: 'result is success'
  retries: 3
  delay: 5
  environment: '{{ proxy_env }}'

- name: 'Ensure systemd user directory exists'
  file:
    path: '{{ elastic_home }}/.config/systemd/user'
    state: 'directory'
    owner: '{{ elastic_user }}'
    group: '{{ elastic_group }}'

- name: 'Generate systemd units by podman'
  become_user: '{{ elastic_user }}'
  become: true
  ansible.builtin.command:
    cmd: >-
      podman generate systemd -f -n 
        -t '{{ elastic_systemd_timeout }}' 
        '{{ elastic_pod_name }}'
    chdir: '{{ elastic_home }}/.config/systemd/user'
    creates: 'pod-{{ elastic_pod_name }}.service'
    # TODO: check if container service is created, too - if paranoid

- name: 'Wait for Elasticsearch to be started'
  ansible.builtin.wait_for:
    host: '{{ ansible_host }}'
    port: '{{ 9200 + elastic_instance_number }}'
    delay: 1
    state: 'started'
    timeout: 60

  # TODO: sleep a little while

- name: 'Enable systemd units by podman'
  become_user: '{{ elastic_user }}'
  become: true
  ansible.builtin.systemd:
    name: '{{ item }}'
    scope: 'user'
    state: 'started'
  loop:
    - 'pod-{{ elastic_pod_name }}.service'
